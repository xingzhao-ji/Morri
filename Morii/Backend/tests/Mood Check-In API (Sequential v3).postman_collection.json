{
	"info": {
		"_postman_id": "1f0197ba-61b3-491a-9785-28ab603e7b00",
		"name": "Mood Check-In API (Sequential v3)",
		"description": "Sequentially tests Mood Check-In API: Create -> Read -> Update -> Delete. Assumes empty database at start.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45260822",
		"_collection_link": "https://davidsun-853384.postman.co/workspace/David-Sun's-Workspace~1fa052ca-290c-4083-8030-cc8074bd5f04/collection/45260822-1f0197ba-61b3-491a-9785-28ab603e7b00?action=share&source=collection_link&creator=45260822"
	},
	"item": [
		{
			"name": "1. Create Check-Ins (Populate Data)",
			"item": [
				{
					"name": "C1.01 - User A - POST Public Check-In (Loc Shared)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => { pm.response.to.have.status(201); });",
									"const res = pm.response.json();",
									"pm.test(\"Response has an _id\", () => { pm.expect(res._id).to.be.a('string'); });",
									"pm.environment.set(\"checkInId_A1_public_locShared\", res._id);",
									"pm.test(\"User ID matches\", () => {",
									"    const res = pm.response.json();",
									"    const expectedUserId = pm.environment.get(\"userId_A\"); // Or userId_B for other tests",
									"",
									"    console.log(\"Response userId:\", res.userId);",
									"    console.log(\"Expected userId from environment:\", expectedUserId);",
									"    console.log(\"Type of Response userId:\", typeof res.userId);",
									"    console.log(\"Type of Expected userId:\", typeof expectedUserId);",
									"",
									"    pm.expect(res.userId).to.eql(expectedUserId);",
									"});pm.test(\"Emotion is 'joyful'\", () => { pm.expect(res.emotion.name).to.eql(\"joyful\"); });",
									"pm.test(\"Privacy is 'public'\", () => { pm.expect(res.privacy).to.eql(\"public\"); });",
									"pm.test(\"Location name is 'Tech Park' and shared\", () => {",
									"    pm.expect(res.location.name).to.eql(\"Tech Park\");",
									"    pm.expect(res.location.isShared).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userIdA_from_env = pm.environment.get(\"userId_A\");",
									"console.log(\"Pre-request: userId_A from environment:\", userIdA_from_env);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\",\n    \"emotion\": {\n        \"name\": \"Joyful\",\n        \"attributes\": {\"intensity\": 4}\n    },\n    \"reason\": \"Successful project launch!\",\n    \"people\": [\"Team Alpha\"],\n    \"activities\": [\"work\", \"celebration\"],\n    \"location\": {\n        \"name\": \"Tech Park\",\n        \"coordinates\": [-122.084, 37.422],\n        \"isShared\": true\n    },\n    \"privacy\": \"Public\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin"
							]
						}
					},
					"response": []
				},
				{
					"name": "C1.02 - User A - POST Private Check-In (Loc Not Shared)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => { pm.response.to.have.status(201); });",
									"const res = pm.response.json();",
									"pm.test(\"Response has an _id\", () => { pm.expect(res._id).to.be.a('string'); });",
									"pm.environment.set(\"checkInId_A2_private_locNotShared\", res._id);",
									"pm.test(\"User ID matches\", () => { pm.expect(res.userId).to.eql(pm.environment.get(\"userId_A\")); });",
									"pm.test(\"Emotion is 'reflective'\", () => { pm.expect(res.emotion.name).to.eql(\"reflective\"); });",
									"pm.test(\"Privacy is 'private'\", () => { pm.expect(res.privacy).to.eql(\"private\"); });",
									"pm.test(\"Location name is 'Home Office' and not shared\", () => {",
									"    pm.expect(res.location.name).to.eql(\"Home Office\");",
									"    pm.expect(res.location.isShared).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\",\n    \"emotion\": {\n        \"name\": \"Reflective\"\n    },\n    \"reason\": \"Quiet evening thoughts.\",\n    \"location\": {\n        \"name\": \"Home Office\",\n        \"isShared\": false \n    },\n    \"privacy\": \"Private\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin"
							]
						}
					},
					"response": []
				},
				{
					"name": "C1.03 - User A - POST Friends Check-In (No Location)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => { pm.response.to.have.status(201); });",
									"const res = pm.response.json();",
									"pm.test(\"Response has an _id\", () => { pm.expect(res._id).to.be.a('string'); });",
									"pm.environment.set(\"checkInId_A3_friends_noLoc\", res._id);",
									"pm.test(\"Privacy is 'friends'\", () => { pm.expect(res.privacy).to.eql(\"friends\"); });",
									"pm.test(\"Location is null\", () => { pm.expect(res.location).to.be.null; });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\",\n    \"emotion\": {\n        \"name\": \"Content\"\n    },\n    \"reason\": \"Relaxing with a book.\",\n    \"people\": [\"Just me\"],\n    \"activities\": [\"reading\"],\n    \"privacy\": \"Friends\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin"
							]
						}
					},
					"response": []
				},
				{
					"name": "C1.04 - User B - POST Public Check-In (Location String)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => { pm.response.to.have.status(201); });",
									"const res = pm.response.json();",
									"pm.test(\"Response has an _id\", () => { pm.expect(res._id).to.be.a('string'); });",
									"pm.environment.set(\"checkInId_B1_public_locShared\", res._id);",
									"pm.test(\"User ID matches User B\", () => { pm.expect(res.userId).to.eql(pm.environment.get(\"userId_B\")); });",
									"pm.test(\"Location name is 'Downtown Cafe' and shared\", () => {",
									"    pm.expect(res.location.name).to.eql(\"Downtown Cafe\");",
									"    pm.expect(res.location.isShared).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_B}}\",\n    \"emotion\": {\n        \"name\": \"Energized\"\n    },\n    \"location\": \"Downtown Cafe\",\n    \"privacy\": \"Public\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin"
							]
						}
					},
					"response": []
				},
				{
					"name": "C1.05 - Validation - Missing userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => { pm.response.to.have.status(400); });",
									"pm.test(\"Error: Required fields missing\", () => { pm.expect(pm.response.json().error).to.eql(\"Required fields missing: userId and emotion.name are required\"); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"emotion\": {\n        \"name\": \"Sad\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin"
							]
						}
					},
					"response": []
				},
				{
					"name": "C1.06 - Validation - Invalid userId Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => { pm.response.to.have.status(400); });",
									"pm.test(\"Error: Invalid userId format\", () => { pm.expect(pm.response.json().error).to.eql(\"Invalid userId format. Must be a valid MongoDB ObjectId\"); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"invalid-user-id\",\n    \"emotion\": {\n        \"name\": \"Angry\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin"
							]
						}
					},
					"response": []
				},
				{
					"name": "C1.07 - Validation - Reason Too Long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => { pm.response.to.have.status(400); });",
									"pm.test(\"Error: Reason text exceeds maximum length\", () => { pm.expect(pm.response.json().error).to.eql(\"Reason text exceeds maximum length of 500 characters\"); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\",\n    \"emotion\": {\n        \"name\": \"Stressed\"\n    },\n    \"reason\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin"
							]
						}
					},
					"response": []
				},
				{
					"name": "C1.08 - Validation - Invalid Coordinates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => { pm.response.to.have.status(400); });",
									"pm.test(\"Error: Invalid coordinates format\", () => { pm.expect(pm.response.json().error).to.eql(\"Invalid coordinates format. Must be an array of exactly 2 numbers [longitude, latitude]\"); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\",\n    \"emotion\": {\n        \"name\": \"Curious\"\n    },\n    \"location\": {\n        \"name\": \"Invalid Place\",\n        \"coordinates\": [-122.084, \"not-a-latitude\"],\n        \"isShared\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests for creating new check-ins and validating input."
		},
		{
			"name": "2. Retrieve Check-Ins (Access Data)",
			"item": [
				{
					"name": "R2.01 - User A - GET Check-Ins (Defaults)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => { pm.response.to.have.status(200); });",
									"const res = pm.response.json();",
									"pm.test(\"Response has checkIns array and pagination\", () => {",
									"    pm.expect(res.checkIns).to.be.an('array');",
									"    pm.expect(res.pagination).to.be.an('object');",
									"});",
									"pm.test(\"User A has 3 check-ins\", () => { pm.expect(res.checkIns.length).to.eql(3); });",
									"pm.test(\"Default limit is 10, skip is 0\", () => {",
									"    pm.expect(res.pagination.limit).to.eql(10);",
									"    pm.expect(res.pagination.skip).to.eql(0);",
									"});",
									"pm.test(\"Location data is null by default (includeLocation=false)\", () => {",
									"    res.checkIns.forEach(checkIn => {",
									"        pm.expect(checkIn.location).to.be.null;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/checkin/{{userId_A}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{userId_A}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "R2.02 - User A - GET Check-Ins (Filtered, includeLocation=true)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => { pm.response.to.have.status(200); });",
									"const res = pm.response.json();",
									"pm.test(\"Filters applied correctly (expecting 1 'joyful' public check-in for User A)\", () => {",
									"    pm.expect(res.checkIns.length).to.eql(1);",
									"    const checkIn = res.checkIns[0];",
									"    pm.expect(checkIn._id).to.eql(pm.environment.get(\"checkInId_A1_public_locShared\"));",
									"    pm.expect(checkIn.emotion.name).to.eql(\"joyful\");",
									"    pm.expect(checkIn.privacy).to.eql(\"public\");",
									"    pm.expect(checkIn.location.name).to.eql(\"Tech Park\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/checkin/{{userId_A}}?privacy=public&emotion=joyful&startDate={{pastDate_YYYYMMDD}}&endDate={{futureDate_YYYYMMDD}}&includeLocation=true&limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{userId_A}}"
							],
							"query": [
								{
									"key": "privacy",
									"value": "public"
								},
								{
									"key": "emotion",
									"value": "joyful"
								},
								{
									"key": "startDate",
									"value": "{{pastDate_YYYYMMDD}}"
								},
								{
									"key": "endDate",
									"value": "{{futureDate_YYYYMMDD}}"
								},
								{
									"key": "includeLocation",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "R2.03 - User B - GET Check-Ins (Defaults)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => { pm.response.to.have.status(200); });",
									"const res = pm.response.json();",
									"pm.test(\"User B has 1 check-in\", () => { pm.expect(res.checkIns.length).to.eql(1); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/checkin/{{userId_B}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{userId_B}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "R2.04 - GET Check-In Detail (Public, No Requesting User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => { pm.response.to.have.status(200); });",
									"const res = pm.response.json();",
									"pm.test(\"ID matches A1_public_locShared\", () => { pm.expect(res._id).to.eql(pm.environment.get(\"checkInId_A1_public_locShared\")); });",
									"pm.test(\"Location is visible (shared)\", () => { pm.expect(res.location.name).to.eql(\"Tech Park\"); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/checkin/detail/{{checkInId_A1_public_locShared}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"detail",
								"{{checkInId_A1_public_locShared}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "R2.05 - GET Check-In Detail (Own Private, Requesting User A)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => { pm.response.to.have.status(200); });",
									"const res = pm.response.json();",
									"pm.test(\"ID matches A2_private_locNotShared\", () => { pm.expect(res._id).to.eql(pm.environment.get(\"checkInId_A2_private_locNotShared\")); });",
									"pm.test(\"Location is visible to owner (even if not shared)\", () => { pm.expect(res.location.name).to.eql(\"Home Office\"); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/checkin/detail/{{checkInId_A2_private_locNotShared}}?requestingUserId={{userId_A}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"detail",
								"{{checkInId_A2_private_locNotShared}}"
							],
							"query": [
								{
									"key": "requestingUserId",
									"value": "{{userId_A}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "R2.06 - GET Check-In Detail (Other's Private, Requesting User B)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", () => { pm.response.to.have.status(403); });",
									"pm.test(\"Error: Access denied\", () => { pm.expect(pm.response.json().error).to.eql(\"Access denied. This check-in is private.\"); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/checkin/detail/{{checkInId_A2_private_locNotShared}}?requestingUserId={{userId_B}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"detail",
								"{{checkInId_A2_private_locNotShared}}"
							],
							"query": [
								{
									"key": "requestingUserId",
									"value": "{{userId_B}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "R2.07 - GET Check-In Detail (Private, No Requesting User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", () => { pm.response.to.have.status(403); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/checkin/detail/{{checkInId_A2_private_locNotShared}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"detail",
								"{{checkInId_A2_private_locNotShared}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "R2.08 - GET Check-In Detail (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", () => { pm.response.to.have.status(404); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/checkin/detail/{{nonExistentMongoId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"detail",
								"{{nonExistentMongoId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests for retrieving check-ins (list and detail)."
		},
		{
			"name": "3. Update Check-Ins (Modify Data)",
			"item": [
				{
					"name": "U3.01 - User A - PUT Update Own Check-In (A1_public_locShared)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => { pm.response.to.have.status(200); });",
									"const res = pm.response.json();",
									"pm.test(\"Reason updated and privacy changed to friends\", () => {",
									"    pm.expect(res.reason).to.eql(\"Updated reason and changed privacy.\");",
									"    pm.expect(res.privacy).to.eql(\"friends\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\",\n    \"reason\": \"Updated reason and changed privacy.\",\n    \"privacy\": \"friends\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin/{{checkInId_A1_public_locShared}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{checkInId_A1_public_locShared}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "U3.02 - User B - PUT Attempt to Update User A's Check-In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", () => { pm.response.to.have.status(403); });",
									"pm.test(\"Error: Unauthorized\", () => { pm.expect(pm.response.json().error).to.eql(\"Unauthorized to modify this check-in\"); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_B}}\",\n    \"reason\": \"Attempting unauthorized update.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin/{{checkInId_A1_public_locShared}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{checkInId_A1_public_locShared}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "U3.03 - User A - PUT Update Own Check-In (Reason Too Long)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => { pm.response.to.have.status(400); });",
									"pm.test(\"Error: Reason text exceeds maximum length\", () => { pm.expect(pm.response.json().error).to.eql(\"Reason text exceeds maximum length of 500 characters\"); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\",\n    \"reason\": \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin/{{checkInId_A1_public_locShared}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{checkInId_A1_public_locShared}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "U3.04 - PUT Update Non-Existent Check-In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", () => { pm.response.to.have.status(404); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\",\n    \"reason\": \"This won't work.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin/{{nonExistentMongoId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{nonExistentMongoId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests for updating existing check-ins."
		},
		{
			"name": "4. Delete Check-Ins (Clean Up)",
			"item": [
				{
					"name": "D4.01 - User B - DELETE Attempt to Delete User A's Check-In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", () => { pm.response.to.have.status(403); });",
									"pm.test(\"Error: Unauthorized\", () => { pm.expect(pm.response.json().error).to.eql(\"Unauthorized to delete this check-in\"); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_B}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin/{{checkInId_A1_public_locShared}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{checkInId_A1_public_locShared}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "D4.02 - User A - DELETE Own Check-In (A1_public_locShared)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => { pm.response.to.have.status(200); });",
									"const res = pm.response.json();",
									"pm.test(\"Message confirms deletion and ID matches\", () => {",
									"    pm.expect(res.message).to.eql(\"Check-in deleted successfully\");",
									"    pm.expect(res.deletedId).to.eql(pm.environment.get(\"checkInId_A1_public_locShared\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin/{{checkInId_A1_public_locShared}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{checkInId_A1_public_locShared}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "D4.03 - GET Verify Deletion of A1_public_locShared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found after deletion\", () => { pm.response.to.have.status(404); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/checkin/detail/{{checkInId_A1_public_locShared}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"detail",
								"{{checkInId_A1_public_locShared}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "D4.04 - User A - DELETE Own Check-In (A2_private_locNotShared)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => { pm.response.to.have.status(200); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin/{{checkInId_A2_private_locNotShared}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{checkInId_A2_private_locNotShared}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "D4.05 - User A - DELETE Own Check-In (A3_friends_noLoc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => { pm.response.to.have.status(200); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin/{{checkInId_A3_friends_noLoc}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{checkInId_A3_friends_noLoc}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "D4.06 - User B - DELETE Own Check-In (B1_public_locShared)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => { pm.response.to.have.status(200); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_B}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin/{{checkInId_B1_public_locShared}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{checkInId_B1_public_locShared}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "D4.07 - DELETE Attempt to Delete Already Deleted Check-In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", () => { pm.response.to.have.status(404); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId_A}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/checkin/{{checkInId_A1_public_locShared}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"checkin",
								"{{checkInId_A1_public_locShared}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests for deleting check-ins and verifying deletion."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:4000/api"
		},
		{
			"key": "userId_A",
			"value": "68312811d91deec05e10e28f"
		},
		{
			"key": "userId_B",
			"value": "68312855d3ad4c16a44fb099"
		},
		{
			"key": "checkInId_A1_public_locShared",
			"value": ""
		},
		{
			"key": "checkInId_A2_private_locNotShared",
			"value": ""
		},
		{
			"key": "checkInId_A3_friends_noLoc",
			"value": ""
		},
		{
			"key": "checkInId_B1_public_locShared",
			"value": ""
		},
		{
			"key": "nonExistentMongoId",
			"value": "605f57389ab17a00154268ff"
		},
		{
			"key": "currentDate_YYYYMMDD",
			"value": "2025-05-23"
		},
		{
			"key": "pastDate_YYYYMMDD",
			"value": "2025-01-01"
		},
		{
			"key": "futureDate_YYYYMMDD",
			"value": "2025-12-31"
		}
	]
}